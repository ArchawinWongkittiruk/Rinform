/*
 * generated by Xtext 2.20.0
 */
package uk.ac.kcl.mde.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class RinformGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ReverseInformProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.mde.Rinform.ReverseInformProgram");
		private final Assignment cSentencesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSentencesSentencePartParserRuleCall_0 = (RuleCall)cSentencesAssignment.eContents().get(0);
		
		//ReverseInformProgram:
		//	sentences+=SentencePart*;
		@Override public ParserRule getRule() { return rule; }
		
		//sentences+=SentencePart*
		public Assignment getSentencesAssignment() { return cSentencesAssignment; }
		
		//SentencePart
		public RuleCall getSentencesSentencePartParserRuleCall_0() { return cSentencesSentencePartParserRuleCall_0; }
	}
	public class SentencePartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.mde.Rinform.SentencePart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRoomDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRoomDescriptionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cItemDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cItemDescriptionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cWordsParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSymbolParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cDirectionStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//SentencePart:
		//	RoomDeclaration | RoomDescription | ItemDeclaration | ItemDescription | Words | Symbol | DirectionStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//RoomDeclaration | RoomDescription | ItemDeclaration | ItemDescription | Words | Symbol | DirectionStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RoomDeclaration
		public RuleCall getRoomDeclarationParserRuleCall_0() { return cRoomDeclarationParserRuleCall_0; }
		
		//RoomDescription
		public RuleCall getRoomDescriptionParserRuleCall_1() { return cRoomDescriptionParserRuleCall_1; }
		
		//ItemDeclaration
		public RuleCall getItemDeclarationParserRuleCall_2() { return cItemDeclarationParserRuleCall_2; }
		
		//ItemDescription
		public RuleCall getItemDescriptionParserRuleCall_3() { return cItemDescriptionParserRuleCall_3; }
		
		//Words
		public RuleCall getWordsParserRuleCall_4() { return cWordsParserRuleCall_4; }
		
		//Symbol
		public RuleCall getSymbolParserRuleCall_5() { return cSymbolParserRuleCall_5; }
		
		//DirectionStatement
		public RuleCall getDirectionStatementParserRuleCall_6() { return cDirectionStatementParserRuleCall_6; }
	}
	public class RoomDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.mde.Rinform.RoomDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameTextParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//RoomDeclaration:
		//	"-r" name=Text;
		@Override public ParserRule getRule() { return rule; }
		
		//"-r" name=Text
		public Group getGroup() { return cGroup; }
		
		//"-r"
		public Keyword getRKeyword_0() { return cRKeyword_0; }
		
		//name=Text
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Text
		public RuleCall getNameTextParserRuleCall_1_0() { return cNameTextParserRuleCall_1_0; }
	}
	public class RoomDescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.mde.Rinform.RoomDescription");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRoomDescriptionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRoomDescriptionTextParserRuleCall_1_0 = (RuleCall)cRoomDescriptionAssignment_1.eContents().get(0);
		private final Keyword cRKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRoomAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cRoomRoomDeclarationCrossReference_3_0 = (CrossReference)cRoomAssignment_3.eContents().get(0);
		private final RuleCall cRoomRoomDeclarationTextParserRuleCall_3_0_1 = (RuleCall)cRoomRoomDeclarationCrossReference_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RoomDescription:
		//	"(" roomDescription+=Text+ "-r" room=[RoomDeclaration|Text] ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" roomDescription+=Text+ "-r" room=[RoomDeclaration|Text] ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//roomDescription+=Text+
		public Assignment getRoomDescriptionAssignment_1() { return cRoomDescriptionAssignment_1; }
		
		//Text
		public RuleCall getRoomDescriptionTextParserRuleCall_1_0() { return cRoomDescriptionTextParserRuleCall_1_0; }
		
		//"-r"
		public Keyword getRKeyword_2() { return cRKeyword_2; }
		
		//room=[RoomDeclaration|Text]
		public Assignment getRoomAssignment_3() { return cRoomAssignment_3; }
		
		//[RoomDeclaration|Text]
		public CrossReference getRoomRoomDeclarationCrossReference_3_0() { return cRoomRoomDeclarationCrossReference_3_0; }
		
		//Text
		public RuleCall getRoomRoomDeclarationTextParserRuleCall_3_0_1() { return cRoomRoomDeclarationTextParserRuleCall_3_0_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ContainerDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.mde.Rinform.ContainerDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameTextParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cRKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRoomAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cRoomRoomDeclarationCrossReference_3_0 = (CrossReference)cRoomAssignment_3.eContents().get(0);
		private final RuleCall cRoomRoomDeclarationTextParserRuleCall_3_0_1 = (RuleCall)cRoomRoomDeclarationCrossReference_3_0.eContents().get(1);
		
		//ContainerDeclaration:
		//	"-c" name=Text "-r" room=[RoomDeclaration|Text];
		@Override public ParserRule getRule() { return rule; }
		
		//"-c" name=Text "-r" room=[RoomDeclaration|Text]
		public Group getGroup() { return cGroup; }
		
		//"-c"
		public Keyword getCKeyword_0() { return cCKeyword_0; }
		
		//name=Text
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Text
		public RuleCall getNameTextParserRuleCall_1_0() { return cNameTextParserRuleCall_1_0; }
		
		//"-r"
		public Keyword getRKeyword_2() { return cRKeyword_2; }
		
		//room=[RoomDeclaration|Text]
		public Assignment getRoomAssignment_3() { return cRoomAssignment_3; }
		
		//[RoomDeclaration|Text]
		public CrossReference getRoomRoomDeclarationCrossReference_3_0() { return cRoomRoomDeclarationCrossReference_3_0; }
		
		//Text
		public RuleCall getRoomRoomDeclarationTextParserRuleCall_3_0_1() { return cRoomRoomDeclarationTextParserRuleCall_3_0_1; }
	}
	public class ItemInContainerDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.mde.Rinform.ItemInContainerDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameTextParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cCKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cContainerAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cContainerContainerDeclarationCrossReference_3_0 = (CrossReference)cContainerAssignment_3.eContents().get(0);
		private final RuleCall cContainerContainerDeclarationTextParserRuleCall_3_0_1 = (RuleCall)cContainerContainerDeclarationCrossReference_3_0.eContents().get(1);
		
		//ItemInContainerDeclaration:
		//	"-i" name=Text "-c" container=[ContainerDeclaration|Text];
		@Override public ParserRule getRule() { return rule; }
		
		//"-i" name=Text "-c" container=[ContainerDeclaration|Text]
		public Group getGroup() { return cGroup; }
		
		//"-i"
		public Keyword getIKeyword_0() { return cIKeyword_0; }
		
		//name=Text
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Text
		public RuleCall getNameTextParserRuleCall_1_0() { return cNameTextParserRuleCall_1_0; }
		
		//"-c"
		public Keyword getCKeyword_2() { return cCKeyword_2; }
		
		//container=[ContainerDeclaration|Text]
		public Assignment getContainerAssignment_3() { return cContainerAssignment_3; }
		
		//[ContainerDeclaration|Text]
		public CrossReference getContainerContainerDeclarationCrossReference_3_0() { return cContainerContainerDeclarationCrossReference_3_0; }
		
		//Text
		public RuleCall getContainerContainerDeclarationTextParserRuleCall_3_0_1() { return cContainerContainerDeclarationTextParserRuleCall_3_0_1; }
	}
	public class ItemDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.mde.Rinform.ItemDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cIKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameTextParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cRKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cRoomAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final CrossReference cRoomRoomDeclarationCrossReference_0_3_0 = (CrossReference)cRoomAssignment_0_3.eContents().get(0);
		private final RuleCall cRoomRoomDeclarationTextParserRuleCall_0_3_0_1 = (RuleCall)cRoomRoomDeclarationCrossReference_0_3_0.eContents().get(1);
		private final RuleCall cItemInContainerDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cContainerDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ItemDeclaration:
		//	"-i" name=Text "-r" room=[RoomDeclaration|Text] | ItemInContainerDeclaration | ContainerDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//"-i" name=Text "-r" room=[RoomDeclaration|Text] | ItemInContainerDeclaration | ContainerDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"-i" name=Text "-r" room=[RoomDeclaration|Text]
		public Group getGroup_0() { return cGroup_0; }
		
		//"-i"
		public Keyword getIKeyword_0_0() { return cIKeyword_0_0; }
		
		//name=Text
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//Text
		public RuleCall getNameTextParserRuleCall_0_1_0() { return cNameTextParserRuleCall_0_1_0; }
		
		//"-r"
		public Keyword getRKeyword_0_2() { return cRKeyword_0_2; }
		
		//room=[RoomDeclaration|Text]
		public Assignment getRoomAssignment_0_3() { return cRoomAssignment_0_3; }
		
		//[RoomDeclaration|Text]
		public CrossReference getRoomRoomDeclarationCrossReference_0_3_0() { return cRoomRoomDeclarationCrossReference_0_3_0; }
		
		//Text
		public RuleCall getRoomRoomDeclarationTextParserRuleCall_0_3_0_1() { return cRoomRoomDeclarationTextParserRuleCall_0_3_0_1; }
		
		//ItemInContainerDeclaration
		public RuleCall getItemInContainerDeclarationParserRuleCall_1() { return cItemInContainerDeclarationParserRuleCall_1; }
		
		//ContainerDeclaration
		public RuleCall getContainerDeclarationParserRuleCall_2() { return cContainerDeclarationParserRuleCall_2; }
	}
	public class ItemDescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.mde.Rinform.ItemDescription");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cItemDescriptionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cItemDescriptionTextParserRuleCall_1_0 = (RuleCall)cItemDescriptionAssignment_1.eContents().get(0);
		private final Keyword cIKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cItemAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cItemItemDeclarationCrossReference_3_0 = (CrossReference)cItemAssignment_3.eContents().get(0);
		private final RuleCall cItemItemDeclarationTextParserRuleCall_3_0_1 = (RuleCall)cItemItemDeclarationCrossReference_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ItemDescription:
		//	"(" itemDescription+=Text+ "-i" item=[ItemDeclaration|Text] ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" itemDescription+=Text+ "-i" item=[ItemDeclaration|Text] ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//itemDescription+=Text+
		public Assignment getItemDescriptionAssignment_1() { return cItemDescriptionAssignment_1; }
		
		//Text
		public RuleCall getItemDescriptionTextParserRuleCall_1_0() { return cItemDescriptionTextParserRuleCall_1_0; }
		
		//"-i"
		public Keyword getIKeyword_2() { return cIKeyword_2; }
		
		//item=[ItemDeclaration|Text]
		public Assignment getItemAssignment_3() { return cItemAssignment_3; }
		
		//[ItemDeclaration|Text]
		public CrossReference getItemItemDeclarationCrossReference_3_0() { return cItemItemDeclarationCrossReference_3_0; }
		
		//Text
		public RuleCall getItemItemDeclarationTextParserRuleCall_3_0_1() { return cItemItemDeclarationTextParserRuleCall_3_0_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class DirectionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.mde.Rinform.DirectionStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRoom1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRoom1RoomDeclarationCrossReference_1_0 = (CrossReference)cRoom1Assignment_1.eContents().get(0);
		private final RuleCall cRoom1RoomDeclarationTextParserRuleCall_1_0_1 = (RuleCall)cRoom1RoomDeclarationCrossReference_1_0.eContents().get(1);
		private final Assignment cDirectionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDirectionDirectionEnumRuleCall_2_0 = (RuleCall)cDirectionAssignment_2.eContents().get(0);
		private final Assignment cRoom2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cRoom2RoomDeclarationCrossReference_3_0 = (CrossReference)cRoom2Assignment_3.eContents().get(0);
		private final RuleCall cRoom2RoomDeclarationTextParserRuleCall_3_0_1 = (RuleCall)cRoom2RoomDeclarationCrossReference_3_0.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DirectionStatement:
		//	"<" room1=[RoomDeclaration|Text] direction=Direction room2=[RoomDeclaration|Text] ">";
		@Override public ParserRule getRule() { return rule; }
		
		//"<" room1=[RoomDeclaration|Text] direction=Direction room2=[RoomDeclaration|Text] ">"
		public Group getGroup() { return cGroup; }
		
		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }
		
		//room1=[RoomDeclaration|Text]
		public Assignment getRoom1Assignment_1() { return cRoom1Assignment_1; }
		
		//[RoomDeclaration|Text]
		public CrossReference getRoom1RoomDeclarationCrossReference_1_0() { return cRoom1RoomDeclarationCrossReference_1_0; }
		
		//Text
		public RuleCall getRoom1RoomDeclarationTextParserRuleCall_1_0_1() { return cRoom1RoomDeclarationTextParserRuleCall_1_0_1; }
		
		//direction=Direction
		public Assignment getDirectionAssignment_2() { return cDirectionAssignment_2; }
		
		//Direction
		public RuleCall getDirectionDirectionEnumRuleCall_2_0() { return cDirectionDirectionEnumRuleCall_2_0; }
		
		//room2=[RoomDeclaration|Text]
		public Assignment getRoom2Assignment_3() { return cRoom2Assignment_3; }
		
		//[RoomDeclaration|Text]
		public CrossReference getRoom2RoomDeclarationCrossReference_3_0() { return cRoom2RoomDeclarationCrossReference_3_0; }
		
		//Text
		public RuleCall getRoom2RoomDeclarationTextParserRuleCall_3_0_1() { return cRoom2RoomDeclarationTextParserRuleCall_3_0_1; }
		
		//">"
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
	}
	public class TextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.mde.Rinform.Text");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Text:
		//	ID (WS ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID (WS ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//(WS ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//WS
		public RuleCall getWSTerminalRuleCall_1_0() { return cWSTerminalRuleCall_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class WordsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.mde.Rinform.Words");
		private final Assignment cWordsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cWordsTextParserRuleCall_0 = (RuleCall)cWordsAssignment.eContents().get(0);
		
		//Words:
		//	words+=Text+;
		@Override public ParserRule getRule() { return rule; }
		
		//words+=Text+
		public Assignment getWordsAssignment() { return cWordsAssignment; }
		
		//Text
		public RuleCall getWordsTextParserRuleCall_0() { return cWordsTextParserRuleCall_0; }
	}
	public class SymbolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.mde.Rinform.Symbol");
		private final Assignment cSymbolAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cSymbolAlternatives_0 = (Alternatives)cSymbolAssignment.eContents().get(0);
		private final Keyword cSymbolFullStopKeyword_0_0 = (Keyword)cSymbolAlternatives_0.eContents().get(0);
		private final Keyword cSymbolCommaKeyword_0_1 = (Keyword)cSymbolAlternatives_0.eContents().get(1);
		private final Keyword cSymbolSemicolonKeyword_0_2 = (Keyword)cSymbolAlternatives_0.eContents().get(2);
		private final Keyword cSymbolColonKeyword_0_3 = (Keyword)cSymbolAlternatives_0.eContents().get(3);
		private final Keyword cSymbolHyphenMinusKeyword_0_4 = (Keyword)cSymbolAlternatives_0.eContents().get(4);
		private final Keyword cSymbolExclamationMarkKeyword_0_5 = (Keyword)cSymbolAlternatives_0.eContents().get(5);
		private final Keyword cSymbolQuestionMarkKeyword_0_6 = (Keyword)cSymbolAlternatives_0.eContents().get(6);
		private final Keyword cSymbolApostropheKeyword_0_7 = (Keyword)cSymbolAlternatives_0.eContents().get(7);
		
		//Symbol:
		//	symbol=('.' | ',' | ';' | ':' | '-' | '!' | '?' | '\'');
		@Override public ParserRule getRule() { return rule; }
		
		//symbol=('.' | ',' | ';' | ':' | '-' | '!' | '?' | '\'')
		public Assignment getSymbolAssignment() { return cSymbolAssignment; }
		
		//('.' | ',' | ';' | ':' | '-' | '!' | '?' | '\'')
		public Alternatives getSymbolAlternatives_0() { return cSymbolAlternatives_0; }
		
		//'.'
		public Keyword getSymbolFullStopKeyword_0_0() { return cSymbolFullStopKeyword_0_0; }
		
		//','
		public Keyword getSymbolCommaKeyword_0_1() { return cSymbolCommaKeyword_0_1; }
		
		//';'
		public Keyword getSymbolSemicolonKeyword_0_2() { return cSymbolSemicolonKeyword_0_2; }
		
		//':'
		public Keyword getSymbolColonKeyword_0_3() { return cSymbolColonKeyword_0_3; }
		
		//'-'
		public Keyword getSymbolHyphenMinusKeyword_0_4() { return cSymbolHyphenMinusKeyword_0_4; }
		
		//'!'
		public Keyword getSymbolExclamationMarkKeyword_0_5() { return cSymbolExclamationMarkKeyword_0_5; }
		
		//'?'
		public Keyword getSymbolQuestionMarkKeyword_0_6() { return cSymbolQuestionMarkKeyword_0_6; }
		
		//'\''
		public Keyword getSymbolApostropheKeyword_0_7() { return cSymbolApostropheKeyword_0_7; }
	}
	
	public class DirectionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.mde.Rinform.Direction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSouthEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSouthSouthKeyword_0_0 = (Keyword)cSouthEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNorthEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNorthNorthKeyword_1_0 = (Keyword)cNorthEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEastEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEastEastKeyword_2_0 = (Keyword)cEastEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cWestEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cWestWestKeyword_3_0 = (Keyword)cWestEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cBelowEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cBelowBelowKeyword_4_0 = (Keyword)cBelowEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cAboveEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cAboveAboveKeyword_5_0 = (Keyword)cAboveEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum Direction:
		//	South | North | East | West | Below | Above;
		public EnumRule getRule() { return rule; }
		
		//South | North | East | West | Below | Above
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//South
		public EnumLiteralDeclaration getSouthEnumLiteralDeclaration_0() { return cSouthEnumLiteralDeclaration_0; }
		
		//"South"
		public Keyword getSouthSouthKeyword_0_0() { return cSouthSouthKeyword_0_0; }
		
		//North
		public EnumLiteralDeclaration getNorthEnumLiteralDeclaration_1() { return cNorthEnumLiteralDeclaration_1; }
		
		//"North"
		public Keyword getNorthNorthKeyword_1_0() { return cNorthNorthKeyword_1_0; }
		
		//East
		public EnumLiteralDeclaration getEastEnumLiteralDeclaration_2() { return cEastEnumLiteralDeclaration_2; }
		
		//"East"
		public Keyword getEastEastKeyword_2_0() { return cEastEastKeyword_2_0; }
		
		//West
		public EnumLiteralDeclaration getWestEnumLiteralDeclaration_3() { return cWestEnumLiteralDeclaration_3; }
		
		//"West"
		public Keyword getWestWestKeyword_3_0() { return cWestWestKeyword_3_0; }
		
		//Below
		public EnumLiteralDeclaration getBelowEnumLiteralDeclaration_4() { return cBelowEnumLiteralDeclaration_4; }
		
		//"Below"
		public Keyword getBelowBelowKeyword_4_0() { return cBelowBelowKeyword_4_0; }
		
		//Above
		public EnumLiteralDeclaration getAboveEnumLiteralDeclaration_5() { return cAboveEnumLiteralDeclaration_5; }
		
		//"Above"
		public Keyword getAboveAboveKeyword_5_0() { return cAboveAboveKeyword_5_0; }
	}
	
	private final ReverseInformProgramElements pReverseInformProgram;
	private final SentencePartElements pSentencePart;
	private final RoomDeclarationElements pRoomDeclaration;
	private final RoomDescriptionElements pRoomDescription;
	private final ContainerDeclarationElements pContainerDeclaration;
	private final ItemInContainerDeclarationElements pItemInContainerDeclaration;
	private final ItemDeclarationElements pItemDeclaration;
	private final ItemDescriptionElements pItemDescription;
	private final DirectionStatementElements pDirectionStatement;
	private final DirectionElements eDirection;
	private final TextElements pText;
	private final WordsElements pWords;
	private final SymbolElements pSymbol;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RinformGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pReverseInformProgram = new ReverseInformProgramElements();
		this.pSentencePart = new SentencePartElements();
		this.pRoomDeclaration = new RoomDeclarationElements();
		this.pRoomDescription = new RoomDescriptionElements();
		this.pContainerDeclaration = new ContainerDeclarationElements();
		this.pItemInContainerDeclaration = new ItemInContainerDeclarationElements();
		this.pItemDeclaration = new ItemDeclarationElements();
		this.pItemDescription = new ItemDescriptionElements();
		this.pDirectionStatement = new DirectionStatementElements();
		this.eDirection = new DirectionElements();
		this.pText = new TextElements();
		this.pWords = new WordsElements();
		this.pSymbol = new SymbolElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uk.ac.kcl.mde.Rinform".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ReverseInformProgram:
	//	sentences+=SentencePart*;
	public ReverseInformProgramElements getReverseInformProgramAccess() {
		return pReverseInformProgram;
	}
	
	public ParserRule getReverseInformProgramRule() {
		return getReverseInformProgramAccess().getRule();
	}
	
	//SentencePart:
	//	RoomDeclaration | RoomDescription | ItemDeclaration | ItemDescription | Words | Symbol | DirectionStatement;
	public SentencePartElements getSentencePartAccess() {
		return pSentencePart;
	}
	
	public ParserRule getSentencePartRule() {
		return getSentencePartAccess().getRule();
	}
	
	//RoomDeclaration:
	//	"-r" name=Text;
	public RoomDeclarationElements getRoomDeclarationAccess() {
		return pRoomDeclaration;
	}
	
	public ParserRule getRoomDeclarationRule() {
		return getRoomDeclarationAccess().getRule();
	}
	
	//RoomDescription:
	//	"(" roomDescription+=Text+ "-r" room=[RoomDeclaration|Text] ")";
	public RoomDescriptionElements getRoomDescriptionAccess() {
		return pRoomDescription;
	}
	
	public ParserRule getRoomDescriptionRule() {
		return getRoomDescriptionAccess().getRule();
	}
	
	//ContainerDeclaration:
	//	"-c" name=Text "-r" room=[RoomDeclaration|Text];
	public ContainerDeclarationElements getContainerDeclarationAccess() {
		return pContainerDeclaration;
	}
	
	public ParserRule getContainerDeclarationRule() {
		return getContainerDeclarationAccess().getRule();
	}
	
	//ItemInContainerDeclaration:
	//	"-i" name=Text "-c" container=[ContainerDeclaration|Text];
	public ItemInContainerDeclarationElements getItemInContainerDeclarationAccess() {
		return pItemInContainerDeclaration;
	}
	
	public ParserRule getItemInContainerDeclarationRule() {
		return getItemInContainerDeclarationAccess().getRule();
	}
	
	//ItemDeclaration:
	//	"-i" name=Text "-r" room=[RoomDeclaration|Text] | ItemInContainerDeclaration | ContainerDeclaration;
	public ItemDeclarationElements getItemDeclarationAccess() {
		return pItemDeclaration;
	}
	
	public ParserRule getItemDeclarationRule() {
		return getItemDeclarationAccess().getRule();
	}
	
	//ItemDescription:
	//	"(" itemDescription+=Text+ "-i" item=[ItemDeclaration|Text] ")";
	public ItemDescriptionElements getItemDescriptionAccess() {
		return pItemDescription;
	}
	
	public ParserRule getItemDescriptionRule() {
		return getItemDescriptionAccess().getRule();
	}
	
	//DirectionStatement:
	//	"<" room1=[RoomDeclaration|Text] direction=Direction room2=[RoomDeclaration|Text] ">";
	public DirectionStatementElements getDirectionStatementAccess() {
		return pDirectionStatement;
	}
	
	public ParserRule getDirectionStatementRule() {
		return getDirectionStatementAccess().getRule();
	}
	
	//enum Direction:
	//	South | North | East | West | Below | Above;
	public DirectionElements getDirectionAccess() {
		return eDirection;
	}
	
	public EnumRule getDirectionRule() {
		return getDirectionAccess().getRule();
	}
	
	//Text:
	//	ID (WS ID)*;
	public TextElements getTextAccess() {
		return pText;
	}
	
	public ParserRule getTextRule() {
		return getTextAccess().getRule();
	}
	
	//Words:
	//	words+=Text+;
	public WordsElements getWordsAccess() {
		return pWords;
	}
	
	public ParserRule getWordsRule() {
		return getWordsAccess().getRule();
	}
	
	//Symbol:
	//	symbol=('.' | ',' | ';' | ':' | '-' | '!' | '?' | '\'');
	public SymbolElements getSymbolAccess() {
		return pSymbol;
	}
	
	public ParserRule getSymbolRule() {
		return getSymbolAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}

/*
 * generated by Xtext 2.20.0
 */
package uk.ac.kcl.mde.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import uk.ac.kcl.mde.rinform.CharacterDeclaration;
import uk.ac.kcl.mde.rinform.CharacterDescription;
import uk.ac.kcl.mde.rinform.ContainerDeclaration;
import uk.ac.kcl.mde.rinform.DirectionStatement;
import uk.ac.kcl.mde.rinform.ItemDescription;
import uk.ac.kcl.mde.rinform.ItemInContainerDeclaration;
import uk.ac.kcl.mde.rinform.ItemInRoomDeclaration;
import uk.ac.kcl.mde.rinform.ReverseInformProgram;
import uk.ac.kcl.mde.rinform.RinformPackage;
import uk.ac.kcl.mde.rinform.RoomAlias;
import uk.ac.kcl.mde.rinform.RoomDeclaration;
import uk.ac.kcl.mde.rinform.RoomDescription;
import uk.ac.kcl.mde.rinform.Words;
import uk.ac.kcl.mde.services.RinformGrammarAccess;

@SuppressWarnings("all")
public class RinformSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private RinformGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == RinformPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case RinformPackage.CHARACTER_DECLARATION:
				sequence_CharacterDeclaration(context, (CharacterDeclaration) semanticObject); 
				return; 
			case RinformPackage.CHARACTER_DESCRIPTION:
				sequence_CharacterDescription(context, (CharacterDescription) semanticObject); 
				return; 
			case RinformPackage.CONTAINER_DECLARATION:
				sequence_ContainerDeclaration(context, (ContainerDeclaration) semanticObject); 
				return; 
			case RinformPackage.DIRECTION_STATEMENT:
				sequence_DirectionStatement(context, (DirectionStatement) semanticObject); 
				return; 
			case RinformPackage.ITEM_DESCRIPTION:
				sequence_ItemDescription(context, (ItemDescription) semanticObject); 
				return; 
			case RinformPackage.ITEM_IN_CONTAINER_DECLARATION:
				sequence_ItemInContainerDeclaration(context, (ItemInContainerDeclaration) semanticObject); 
				return; 
			case RinformPackage.ITEM_IN_ROOM_DECLARATION:
				sequence_ItemInRoomDeclaration(context, (ItemInRoomDeclaration) semanticObject); 
				return; 
			case RinformPackage.REVERSE_INFORM_PROGRAM:
				sequence_ReverseInformProgram(context, (ReverseInformProgram) semanticObject); 
				return; 
			case RinformPackage.ROOM_ALIAS:
				sequence_RoomAlias(context, (RoomAlias) semanticObject); 
				return; 
			case RinformPackage.ROOM_DECLARATION:
				sequence_RoomDeclaration(context, (RoomDeclaration) semanticObject); 
				return; 
			case RinformPackage.ROOM_DESCRIPTION:
				sequence_RoomDescription(context, (RoomDescription) semanticObject); 
				return; 
			case RinformPackage.WORDS:
				sequence_Words(context, (Words) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     SentencePart returns CharacterDeclaration
	 *     CharacterDeclaration returns CharacterDeclaration
	 *
	 * Constraint:
	 *     (name=Text room=[RoomDeclaration|Text])
	 */
	protected void sequence_CharacterDeclaration(ISerializationContext context, CharacterDeclaration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RinformPackage.Literals.CHARACTER_DECLARATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RinformPackage.Literals.CHARACTER_DECLARATION__NAME));
			if (transientValues.isValueTransient(semanticObject, RinformPackage.Literals.CHARACTER_DECLARATION__ROOM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RinformPackage.Literals.CHARACTER_DECLARATION__ROOM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCharacterDeclarationAccess().getNameTextParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getCharacterDeclarationAccess().getRoomRoomDeclarationTextParserRuleCall_5_0_1(), semanticObject.eGet(RinformPackage.Literals.CHARACTER_DECLARATION__ROOM, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SentencePart returns CharacterDescription
	 *     CharacterDescription returns CharacterDescription
	 *
	 * Constraint:
	 *     (personDescription+=Text+ person=[CharacterDeclaration|Text])
	 */
	protected void sequence_CharacterDescription(ISerializationContext context, CharacterDescription semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SentencePart returns ContainerDeclaration
	 *     ContainerDeclaration returns ContainerDeclaration
	 *     ItemDeclaration returns ContainerDeclaration
	 *
	 * Constraint:
	 *     (name=Text room=[RoomDeclaration|Text])
	 */
	protected void sequence_ContainerDeclaration(ISerializationContext context, ContainerDeclaration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RinformPackage.Literals.ITEM_DECLARATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RinformPackage.Literals.ITEM_DECLARATION__NAME));
			if (transientValues.isValueTransient(semanticObject, RinformPackage.Literals.CONTAINER_DECLARATION__ROOM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RinformPackage.Literals.CONTAINER_DECLARATION__ROOM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContainerDeclarationAccess().getNameTextParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getContainerDeclarationAccess().getRoomRoomDeclarationTextParserRuleCall_5_0_1(), semanticObject.eGet(RinformPackage.Literals.CONTAINER_DECLARATION__ROOM, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SentencePart returns DirectionStatement
	 *     DirectionStatement returns DirectionStatement
	 *
	 * Constraint:
	 *     (room1=[RoomDeclaration|Text] direction=Direction room2=[RoomDeclaration|Text])
	 */
	protected void sequence_DirectionStatement(ISerializationContext context, DirectionStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RinformPackage.Literals.DIRECTION_STATEMENT__ROOM1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RinformPackage.Literals.DIRECTION_STATEMENT__ROOM1));
			if (transientValues.isValueTransient(semanticObject, RinformPackage.Literals.DIRECTION_STATEMENT__DIRECTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RinformPackage.Literals.DIRECTION_STATEMENT__DIRECTION));
			if (transientValues.isValueTransient(semanticObject, RinformPackage.Literals.DIRECTION_STATEMENT__ROOM2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RinformPackage.Literals.DIRECTION_STATEMENT__ROOM2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDirectionStatementAccess().getRoom1RoomDeclarationTextParserRuleCall_1_0_1(), semanticObject.eGet(RinformPackage.Literals.DIRECTION_STATEMENT__ROOM1, false));
		feeder.accept(grammarAccess.getDirectionStatementAccess().getDirectionDirectionEnumRuleCall_2_0(), semanticObject.getDirection());
		feeder.accept(grammarAccess.getDirectionStatementAccess().getRoom2RoomDeclarationTextParserRuleCall_3_0_1(), semanticObject.eGet(RinformPackage.Literals.DIRECTION_STATEMENT__ROOM2, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SentencePart returns ItemDescription
	 *     ItemDescription returns ItemDescription
	 *
	 * Constraint:
	 *     (itemDescription+=Text+ item=[ItemDeclaration|Text])
	 */
	protected void sequence_ItemDescription(ISerializationContext context, ItemDescription semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SentencePart returns ItemInContainerDeclaration
	 *     ItemInContainerDeclaration returns ItemInContainerDeclaration
	 *     ItemDeclaration returns ItemInContainerDeclaration
	 *
	 * Constraint:
	 *     (name=Text container=[ContainerDeclaration|ID])
	 */
	protected void sequence_ItemInContainerDeclaration(ISerializationContext context, ItemInContainerDeclaration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RinformPackage.Literals.ITEM_DECLARATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RinformPackage.Literals.ITEM_DECLARATION__NAME));
			if (transientValues.isValueTransient(semanticObject, RinformPackage.Literals.ITEM_IN_CONTAINER_DECLARATION__CONTAINER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RinformPackage.Literals.ITEM_IN_CONTAINER_DECLARATION__CONTAINER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getItemInContainerDeclarationAccess().getNameTextParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getItemInContainerDeclarationAccess().getContainerContainerDeclarationIDTerminalRuleCall_5_0_1(), semanticObject.eGet(RinformPackage.Literals.ITEM_IN_CONTAINER_DECLARATION__CONTAINER, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SentencePart returns ItemInRoomDeclaration
	 *     ItemInRoomDeclaration returns ItemInRoomDeclaration
	 *     ItemDeclaration returns ItemInRoomDeclaration
	 *
	 * Constraint:
	 *     (name=Text room=[RoomDeclaration|Text])
	 */
	protected void sequence_ItemInRoomDeclaration(ISerializationContext context, ItemInRoomDeclaration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RinformPackage.Literals.ITEM_DECLARATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RinformPackage.Literals.ITEM_DECLARATION__NAME));
			if (transientValues.isValueTransient(semanticObject, RinformPackage.Literals.ITEM_IN_ROOM_DECLARATION__ROOM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RinformPackage.Literals.ITEM_IN_ROOM_DECLARATION__ROOM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getItemInRoomDeclarationAccess().getNameTextParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getItemInRoomDeclarationAccess().getRoomRoomDeclarationTextParserRuleCall_5_0_1(), semanticObject.eGet(RinformPackage.Literals.ITEM_IN_ROOM_DECLARATION__ROOM, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ReverseInformProgram returns ReverseInformProgram
	 *
	 * Constraint:
	 *     sentences+=SentencePart+
	 */
	protected void sequence_ReverseInformProgram(ISerializationContext context, ReverseInformProgram semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SentencePart returns RoomAlias
	 *     RoomAlias returns RoomAlias
	 *
	 * Constraint:
	 *     (room=[RoomDeclaration|ID] aliases+=Text+)
	 */
	protected void sequence_RoomAlias(ISerializationContext context, RoomAlias semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SentencePart returns RoomDeclaration
	 *     RoomDeclaration returns RoomDeclaration
	 *
	 * Constraint:
	 *     name=Text
	 */
	protected void sequence_RoomDeclaration(ISerializationContext context, RoomDeclaration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RinformPackage.Literals.ROOM_DECLARATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RinformPackage.Literals.ROOM_DECLARATION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRoomDeclarationAccess().getNameTextParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SentencePart returns RoomDescription
	 *     RoomDescription returns RoomDescription
	 *
	 * Constraint:
	 *     (roomDescription+=Text+ room=[RoomDeclaration|Text])
	 */
	protected void sequence_RoomDescription(ISerializationContext context, RoomDescription semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SentencePart returns Words
	 *     Words returns Words
	 *
	 * Constraint:
	 *     words+=Text+
	 */
	protected void sequence_Words(ISerializationContext context, Words semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}

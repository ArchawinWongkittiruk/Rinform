/*
 * generated by Xtext 2.20.0
 */
grammar InternalRinform;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package uk.ac.kcl.mde.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package uk.ac.kcl.mde.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import uk.ac.kcl.mde.services.RinformGrammarAccess;

}

@parser::members {

 	private RinformGrammarAccess grammarAccess;

    public InternalRinformParser(TokenStream input, RinformGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "ReverseInformProgram";
   	}

   	@Override
   	protected RinformGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleReverseInformProgram
entryRuleReverseInformProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReverseInformProgramRule()); }
	iv_ruleReverseInformProgram=ruleReverseInformProgram
	{ $current=$iv_ruleReverseInformProgram.current; }
	EOF;

// Rule ReverseInformProgram
ruleReverseInformProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getReverseInformProgramAccess().getSentencesSentencePartParserRuleCall_0());
			}
			lv_sentences_0_0=ruleSentencePart
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getReverseInformProgramRule());
				}
				add(
					$current,
					"sentences",
					lv_sentences_0_0,
					"uk.ac.kcl.mde.Rinform.SentencePart");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleSentencePart
entryRuleSentencePart returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSentencePartRule()); }
	iv_ruleSentencePart=ruleSentencePart
	{ $current=$iv_ruleSentencePart.current; }
	EOF;

// Rule SentencePart
ruleSentencePart returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSentencePartAccess().getRoomDeclarationParserRuleCall_0());
		}
		this_RoomDeclaration_0=ruleRoomDeclaration
		{
			$current = $this_RoomDeclaration_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSentencePartAccess().getRoomDescriptionParserRuleCall_1());
		}
		this_RoomDescription_1=ruleRoomDescription
		{
			$current = $this_RoomDescription_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSentencePartAccess().getItemDeclarationParserRuleCall_2());
		}
		this_ItemDeclaration_2=ruleItemDeclaration
		{
			$current = $this_ItemDeclaration_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSentencePartAccess().getItemDescriptionParserRuleCall_3());
		}
		this_ItemDescription_3=ruleItemDescription
		{
			$current = $this_ItemDescription_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSentencePartAccess().getWordsParserRuleCall_4());
		}
		this_Words_4=ruleWords
		{
			$current = $this_Words_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSentencePartAccess().getSymbolParserRuleCall_5());
		}
		this_Symbol_5=ruleSymbol
		{
			$current = $this_Symbol_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSentencePartAccess().getDirectionStatementParserRuleCall_6());
		}
		this_DirectionStatement_6=ruleDirectionStatement
		{
			$current = $this_DirectionStatement_6.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleRoomDeclaration
entryRuleRoomDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRoomDeclarationRule()); }
	iv_ruleRoomDeclaration=ruleRoomDeclaration
	{ $current=$iv_ruleRoomDeclaration.current; }
	EOF;

// Rule RoomDeclaration
ruleRoomDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='-r'
		{
			newLeafNode(otherlv_0, grammarAccess.getRoomDeclarationAccess().getRKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRoomDeclarationAccess().getNameTextParserRuleCall_1_0());
				}
				lv_name_1_0=ruleText
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRoomDeclarationRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"uk.ac.kcl.mde.Rinform.Text");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRoomDescription
entryRuleRoomDescription returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRoomDescriptionRule()); }
	iv_ruleRoomDescription=ruleRoomDescription
	{ $current=$iv_ruleRoomDescription.current; }
	EOF;

// Rule RoomDescription
ruleRoomDescription returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getRoomDescriptionAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRoomDescriptionAccess().getRoomDescriptionTextParserRuleCall_1_0());
				}
				lv_roomDescription_1_0=ruleText
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRoomDescriptionRule());
					}
					add(
						$current,
						"roomDescription",
						lv_roomDescription_1_0,
						"uk.ac.kcl.mde.Rinform.Text");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_2='-r'
		{
			newLeafNode(otherlv_2, grammarAccess.getRoomDescriptionAccess().getRKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRoomDescriptionRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getRoomDescriptionAccess().getRoomRoomDeclarationCrossReference_3_0());
				}
				ruleText
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getRoomDescriptionAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleItemDeclaration
entryRuleItemDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getItemDeclarationRule()); }
	iv_ruleItemDeclaration=ruleItemDeclaration
	{ $current=$iv_ruleItemDeclaration.current; }
	EOF;

// Rule ItemDeclaration
ruleItemDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='-i'
		{
			newLeafNode(otherlv_0, grammarAccess.getItemDeclarationAccess().getIKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getItemDeclarationAccess().getNameTextParserRuleCall_1_0());
				}
				lv_name_1_0=ruleText
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getItemDeclarationRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"uk.ac.kcl.mde.Rinform.Text");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='-r'
		{
			newLeafNode(otherlv_2, grammarAccess.getItemDeclarationAccess().getRKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getItemDeclarationRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getItemDeclarationAccess().getRoomRoomDeclarationCrossReference_3_0());
				}
				ruleText
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleItemDescription
entryRuleItemDescription returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getItemDescriptionRule()); }
	iv_ruleItemDescription=ruleItemDescription
	{ $current=$iv_ruleItemDescription.current; }
	EOF;

// Rule ItemDescription
ruleItemDescription returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getItemDescriptionAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getItemDescriptionAccess().getItemDescriptionTextParserRuleCall_1_0());
				}
				lv_itemDescription_1_0=ruleText
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getItemDescriptionRule());
					}
					add(
						$current,
						"itemDescription",
						lv_itemDescription_1_0,
						"uk.ac.kcl.mde.Rinform.Text");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_2='-i'
		{
			newLeafNode(otherlv_2, grammarAccess.getItemDescriptionAccess().getIKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getItemDescriptionRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getItemDescriptionAccess().getItemItemDeclarationCrossReference_3_0());
				}
				ruleText
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getItemDescriptionAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleDirectionStatement
entryRuleDirectionStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDirectionStatementRule()); }
	iv_ruleDirectionStatement=ruleDirectionStatement
	{ $current=$iv_ruleDirectionStatement.current; }
	EOF;

// Rule DirectionStatement
ruleDirectionStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='<'
		{
			newLeafNode(otherlv_0, grammarAccess.getDirectionStatementAccess().getLessThanSignKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDirectionStatementRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getDirectionStatementAccess().getRoom1RoomDeclarationCrossReference_1_0());
				}
				ruleText
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getDirectionStatementAccess().getDirectionDirectionEnumRuleCall_2_0());
				}
				lv_direction_2_0=ruleDirection
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDirectionStatementRule());
					}
					set(
						$current,
						"direction",
						lv_direction_2_0,
						"uk.ac.kcl.mde.Rinform.Direction");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDirectionStatementRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getDirectionStatementAccess().getRoom2RoomDeclarationCrossReference_3_0());
				}
				ruleText
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='>'
		{
			newLeafNode(otherlv_4, grammarAccess.getDirectionStatementAccess().getGreaterThanSignKeyword_4());
		}
	)
;

// Entry rule entryRuleText
entryRuleText returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTextRule()); }
	iv_ruleText=ruleText
	{ $current=$iv_ruleText.current.getText(); }
	EOF;

// Rule Text
ruleText returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getTextAccess().getIDTerminalRuleCall_0());
		}
		(
			this_WS_1=RULE_WS
			{
				$current.merge(this_WS_1);
			}
			{
				newLeafNode(this_WS_1, grammarAccess.getTextAccess().getWSTerminalRuleCall_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getTextAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

// Entry rule entryRuleWords
entryRuleWords returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWordsRule()); }
	iv_ruleWords=ruleWords
	{ $current=$iv_ruleWords.current; }
	EOF;

// Rule Words
ruleWords returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getWordsAccess().getWordsTextParserRuleCall_0());
			}
			lv_words_0_0=ruleText
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getWordsRule());
				}
				add(
					$current,
					"words",
					lv_words_0_0,
					"uk.ac.kcl.mde.Rinform.Text");
				afterParserOrEnumRuleCall();
			}
		)
	)+
;

// Entry rule entryRuleSymbol
entryRuleSymbol returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSymbolRule()); }
	iv_ruleSymbol=ruleSymbol
	{ $current=$iv_ruleSymbol.current; }
	EOF;

// Rule Symbol
ruleSymbol returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_symbol_0_1='.'
				{
					newLeafNode(lv_symbol_0_1, grammarAccess.getSymbolAccess().getSymbolFullStopKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSymbolRule());
					}
					setWithLastConsumed($current, "symbol", lv_symbol_0_1, null);
				}
				    |
				lv_symbol_0_2=','
				{
					newLeafNode(lv_symbol_0_2, grammarAccess.getSymbolAccess().getSymbolCommaKeyword_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSymbolRule());
					}
					setWithLastConsumed($current, "symbol", lv_symbol_0_2, null);
				}
				    |
				lv_symbol_0_3=';'
				{
					newLeafNode(lv_symbol_0_3, grammarAccess.getSymbolAccess().getSymbolSemicolonKeyword_0_2());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSymbolRule());
					}
					setWithLastConsumed($current, "symbol", lv_symbol_0_3, null);
				}
				    |
				lv_symbol_0_4=':'
				{
					newLeafNode(lv_symbol_0_4, grammarAccess.getSymbolAccess().getSymbolColonKeyword_0_3());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSymbolRule());
					}
					setWithLastConsumed($current, "symbol", lv_symbol_0_4, null);
				}
				    |
				lv_symbol_0_5='-'
				{
					newLeafNode(lv_symbol_0_5, grammarAccess.getSymbolAccess().getSymbolHyphenMinusKeyword_0_4());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSymbolRule());
					}
					setWithLastConsumed($current, "symbol", lv_symbol_0_5, null);
				}
				    |
				lv_symbol_0_6='!'
				{
					newLeafNode(lv_symbol_0_6, grammarAccess.getSymbolAccess().getSymbolExclamationMarkKeyword_0_5());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSymbolRule());
					}
					setWithLastConsumed($current, "symbol", lv_symbol_0_6, null);
				}
				    |
				lv_symbol_0_7='?'
				{
					newLeafNode(lv_symbol_0_7, grammarAccess.getSymbolAccess().getSymbolQuestionMarkKeyword_0_6());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSymbolRule());
					}
					setWithLastConsumed($current, "symbol", lv_symbol_0_7, null);
				}
				    |
				lv_symbol_0_8='\''
				{
					newLeafNode(lv_symbol_0_8, grammarAccess.getSymbolAccess().getSymbolApostropheKeyword_0_7());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSymbolRule());
					}
					setWithLastConsumed($current, "symbol", lv_symbol_0_8, null);
				}
			)
		)
	)
;

// Rule Direction
ruleDirection returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='South'
			{
				$current = grammarAccess.getDirectionAccess().getSouthEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getDirectionAccess().getSouthEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='North'
			{
				$current = grammarAccess.getDirectionAccess().getNorthEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getDirectionAccess().getNorthEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='East'
			{
				$current = grammarAccess.getDirectionAccess().getEastEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getDirectionAccess().getEastEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='West'
			{
				$current = grammarAccess.getDirectionAccess().getWestEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getDirectionAccess().getWestEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='Below'
			{
				$current = grammarAccess.getDirectionAccess().getBelowEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getDirectionAccess().getBelowEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='Above'
			{
				$current = grammarAccess.getDirectionAccess().getAboveEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getDirectionAccess().getAboveEnumLiteralDeclaration_5());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;

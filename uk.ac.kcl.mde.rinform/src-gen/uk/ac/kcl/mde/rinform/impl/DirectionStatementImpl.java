/**
 * generated by Xtext 2.20.0
 */
package uk.ac.kcl.mde.rinform.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import uk.ac.kcl.mde.rinform.Direction;
import uk.ac.kcl.mde.rinform.DirectionStatement;
import uk.ac.kcl.mde.rinform.RinformPackage;
import uk.ac.kcl.mde.rinform.RoomDeclaration;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Direction Statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.mde.rinform.impl.DirectionStatementImpl#getRoom1 <em>Room1</em>}</li>
 *   <li>{@link uk.ac.kcl.mde.rinform.impl.DirectionStatementImpl#getDirection <em>Direction</em>}</li>
 *   <li>{@link uk.ac.kcl.mde.rinform.impl.DirectionStatementImpl#getRoom2 <em>Room2</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DirectionStatementImpl extends SentencePartImpl implements DirectionStatement
{
  /**
   * The cached value of the '{@link #getRoom1() <em>Room1</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRoom1()
   * @generated
   * @ordered
   */
  protected RoomDeclaration room1;

  /**
   * The default value of the '{@link #getDirection() <em>Direction</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDirection()
   * @generated
   * @ordered
   */
  protected static final Direction DIRECTION_EDEFAULT = Direction.SOUTH;

  /**
   * The cached value of the '{@link #getDirection() <em>Direction</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDirection()
   * @generated
   * @ordered
   */
  protected Direction direction = DIRECTION_EDEFAULT;

  /**
   * The cached value of the '{@link #getRoom2() <em>Room2</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRoom2()
   * @generated
   * @ordered
   */
  protected RoomDeclaration room2;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DirectionStatementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RinformPackage.Literals.DIRECTION_STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RoomDeclaration getRoom1()
  {
    if (room1 != null && room1.eIsProxy())
    {
      InternalEObject oldRoom1 = (InternalEObject)room1;
      room1 = (RoomDeclaration)eResolveProxy(oldRoom1);
      if (room1 != oldRoom1)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, RinformPackage.DIRECTION_STATEMENT__ROOM1, oldRoom1, room1));
      }
    }
    return room1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RoomDeclaration basicGetRoom1()
  {
    return room1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRoom1(RoomDeclaration newRoom1)
  {
    RoomDeclaration oldRoom1 = room1;
    room1 = newRoom1;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RinformPackage.DIRECTION_STATEMENT__ROOM1, oldRoom1, room1));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Direction getDirection()
  {
    return direction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDirection(Direction newDirection)
  {
    Direction oldDirection = direction;
    direction = newDirection == null ? DIRECTION_EDEFAULT : newDirection;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RinformPackage.DIRECTION_STATEMENT__DIRECTION, oldDirection, direction));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RoomDeclaration getRoom2()
  {
    if (room2 != null && room2.eIsProxy())
    {
      InternalEObject oldRoom2 = (InternalEObject)room2;
      room2 = (RoomDeclaration)eResolveProxy(oldRoom2);
      if (room2 != oldRoom2)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, RinformPackage.DIRECTION_STATEMENT__ROOM2, oldRoom2, room2));
      }
    }
    return room2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RoomDeclaration basicGetRoom2()
  {
    return room2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRoom2(RoomDeclaration newRoom2)
  {
    RoomDeclaration oldRoom2 = room2;
    room2 = newRoom2;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RinformPackage.DIRECTION_STATEMENT__ROOM2, oldRoom2, room2));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RinformPackage.DIRECTION_STATEMENT__ROOM1:
        if (resolve) return getRoom1();
        return basicGetRoom1();
      case RinformPackage.DIRECTION_STATEMENT__DIRECTION:
        return getDirection();
      case RinformPackage.DIRECTION_STATEMENT__ROOM2:
        if (resolve) return getRoom2();
        return basicGetRoom2();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RinformPackage.DIRECTION_STATEMENT__ROOM1:
        setRoom1((RoomDeclaration)newValue);
        return;
      case RinformPackage.DIRECTION_STATEMENT__DIRECTION:
        setDirection((Direction)newValue);
        return;
      case RinformPackage.DIRECTION_STATEMENT__ROOM2:
        setRoom2((RoomDeclaration)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RinformPackage.DIRECTION_STATEMENT__ROOM1:
        setRoom1((RoomDeclaration)null);
        return;
      case RinformPackage.DIRECTION_STATEMENT__DIRECTION:
        setDirection(DIRECTION_EDEFAULT);
        return;
      case RinformPackage.DIRECTION_STATEMENT__ROOM2:
        setRoom2((RoomDeclaration)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RinformPackage.DIRECTION_STATEMENT__ROOM1:
        return room1 != null;
      case RinformPackage.DIRECTION_STATEMENT__DIRECTION:
        return direction != DIRECTION_EDEFAULT;
      case RinformPackage.DIRECTION_STATEMENT__ROOM2:
        return room2 != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (direction: ");
    result.append(direction);
    result.append(')');
    return result.toString();
  }

} //DirectionStatementImpl
